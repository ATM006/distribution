@App:name("NamedAggregation")
@App:description("Demonstrates how to create a named aggregation for better query performance.")

/*
Purpose:
    This application demonstrates how to create the named aggregation for better query performance.In this example the named aggregation keeps the aggregation of events such as average of price and sum of price.For more information on windows please refer to "https://siddhi.io/siddhi/documentation/siddhi-5.0/#window" The 'group by' clause helps to perform aggregation on events grouped by a certain attributes.In this sample, the symbol information per items is aggregated.

Prerequisites:
    1) Save this sample

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'
    2) If the Siddhi application starts successfully, the following messages would be shown on the console
        * NamedAggregation.siddhi - Started Successfully!
        
Testing the Sample:
    1) Click on 'Event Simulator' (double arrows on left tab)
    2) Click 'Single Simulation' (this will be already selected)
    3) Select 'NamedAggregation' as Siddhi App Name
    4) Select 'TradeStream' as StreamName
    5) Provide attribute values
        -symbol: WSO10
        - price: 100
        - volume: 10
    6) Send event
    7) Provide attribute values
        - symbol: WSO11
        - price: 200
        - volume: 20
    8) Send event
    9) Provide attribute values
        - symbol: WSO12
        - price: 300
        - volume: 30
    10) Send event
    11) Provide attribute values
        - symbol: WSO13
        - price: 400
        - volume: 40
    12) Send event
    13) Select 'TriggerStream' as StreamName
    14) Provide attribute values
        - triggerId: 1
    15) Send event
Viewing the Results:
         See the output on the console similar to the following (timestamp will be different).
         [2019-09-19_11-39-43_168] INFO {io.siddhi.core.stream.output.sink.LogSink} - NamedAggregation : AggregateStockStream : [Event{timestamp=1568873383167, data=[100.0, 100.0], isExpired=false}, Event{timestamp=1568873383167, data=[300.0, 300.0], isExpired=false}, Event{timestamp=1568873383167, data=[400.0, 400.0], isExpired=false}]
         */
         
define stream TradeStream(symbol string, price double, volume long);

define stream TriggerStream (triggerId string);

@sink(type="log")
define stream AggregateStockStream(total double,avgPrice double);

define aggregation TradeAggregation
from TradeStream
select symbol, avg(price) as avgPrice, sum(price) as total
group by symbol
aggregate every sec...year;

from TriggerStream as s join TradeAggregation as t
within "2016-06-06 12:00:00 +05:30", "2020-06-06 12:00:00 +05:30"
per 'hours'
select  t.total, t.avgPrice
insert into AggregateStockStream;
