@App:name("Grpc-Service")
@App:description("Description of the plan")

/*

Purpose:
    This application demonstrates how to use grpc as a service with default grpc service (EventService)

Prerequisites:
    1) Save this sample

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'

    2) If the Siddhi application starts successfully, the following messages would be shown on the console
        * Grpc-Service.siddhi - Started Successfully!

    Notes:
    Do not change the value of the port(5545), because the sample client that uses in this example uses the port 5545. 
    

Testing the Sample:
    Publish events to the http endpoint defined by 'receiver.url' in Source configuration. You may publish events with curl command or Postman application as follows,
    1) Navigate to {SiddhiDistribution_Home}/samples/sample-clients/grpc-client and run "ant" command as follows:
            Run "ant" command in the terminal
            If you want to publish custom number of events, you need to run "ant" command as follows
                ant -DnoOfEventsToSend=5


Viewing the Results:
    See the output on the console.
        "Grpc-Service : OutputStream : Event{timestamp=1569601652726, data=[9f3cecfa-a211-4ddb-90bc-91e8bb82e907, Request 5], isExpired=false}"
    you will see a similar output like this.

*/

@source(type='grpc-service', 
                receiver.url = 'grpc://localhost:5545/org.wso2.grpc.EventService/process', source.id='1', 
                @map(type='json', @attributes(messageId='trp:message.id', message='message'))) 
                define stream FooStream (messageId String, message String);
                
@sink(type='grpc-service-response',  source.id='1',
                message.id='{{messageId}}', 
                @map(type='json'))
                define stream BarStream (messageId String, message String);

@sink(type='log')
    define stream OutputStream (messageId String, message String); --only to show output in the console
    
@info(name = 'query1')
                from FooStream select * insert into BarStream;
                
@info(name = 'query2')
                from BarStream select * insert into OutputStream;
                
                
                
                