@App:name("GrpcGenericService")
@App:description("Use siddhi as a gRPC service")

/*

Purpose:
    This application demonstrates how to use grpc as a service with custom grpc service (EventService)

Prerequisites:
    1) Save this sample
    2) Pack autogenerated protobuf and grpc service classes into a jar (If you are using maven to generate protobuf and grpc classes, you can use the .jar file 
    that get creates in the target folder after executing the 'mvn clean install' command)
    3) Navigate to {SiddhiDistribution_Home}/jars and put the jar into jars folder
    4) Stop the siddhi editor and re-start the editor again.

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'

    2) If the Siddhi application starts successfully, the following messages would be shown on the console
        * Grpc-Service.siddhi - Started Successfully!

    Notes:
    Do not change the value of the port(5546), because the sample client that uses in this example uses the port 5546. 
    

Testing the Sample:
    Publish events to the grpc service defined by 'receiver.url' in Source configuration. You may publish events with ant command as follows,
    1) Navigate to {SiddhiDistribution_Home}/samples/sample-clients/grpc-generic-client and run "ant" command as follows:
            Run "ant" command in the terminal
            If you want to publish custom number of events, you need to run "ant" command as follows
                ant -DnoOfEventsToSend=5


Viewing the Results:
    See the output on the console.
        GrpcGenericService : OutputStream : Event{timestamp=1569605397578, data=[Request 10, 73a0b20a-1737-4a7f-9ea0-405849626379, 19, 1009, false, 54.34, 177.45], isExpired=false}
    you will see a similar output like this.

*/

@source(type='grpc-service',
    receiver.url='grpc://localhost:5546/io.siddhi.extension.io.grpc.proto.MyService/process', source.id='1',
    @map(type='protobuf' ,
    @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d ='booleanValue', e = 'floatValue', f ='doubleValue')))
define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double);

@sink(type='grpc-service-response',
    publisher.url='grpc://localhost:5546/io.siddhi.extension.io.grpc.proto.MyService/process', source.id='1',message.id='{{messageId}}',
    @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f')))
define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double);

--only to show output in the console
@sink(type='log')
define stream OutputStream (a string,messageId string, b int,c long,d bool,e float,f double);
                
@info(name = 'query')
from FooStream
select *
insert into BarStream;

@info(name = 'query2')
from BarStream
select * insert
into OutputStream;

