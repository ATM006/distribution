@App:name("SimpleFilter")
@App:description("Filters provide a way of filtering input stream events based on a specified condition")

/*

Purpose:
    This application demonstrates how to filter out events from a stream using siddhi.
    The sample depicts a scenario for events with high temperature.

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'
    2) If the Siddhi application starts successfully, the following message would be shown on the console
        * SimpleFilter.siddhi - Started Successfully!.

Testing the Sample:
    1) Click on 'Event Simulator' (double arrows on left tab)
    2) Click 'Single Simulation' (this will be already selected)
    3) Select 'SimpleFilter' as Siddhi App Name
    4) Select 'TempStream' as StreamName
    5) Provide attribute values
        - roomNo: 001
        - temp: 50.0
    6) Send event
    7) Provide attribute values
        - roomNo: 002
        - temp: 35.0
    8) Send event
    9) Provide attribute values
        - roomNo: 003
        - temp: 40.0
    10) Send event
    11) Provide attribute values
        - roomNo: 004
        - temp: 39.0
    12) Send event

Viewing the Results:
    See the input and respective output on the console similar to the following (timestamp will be different).It can be observed that the events which do not satisfy the given condition are ignored.
    INFO {io.siddhi.core.stream.output.sink.LogSink} - LOGGER : Event{timestamp=1568267724796, data=[140, 45.0], isExpired=false}
*/

define stream TempStream(roomNo int, temp double);

@sink(type = 'log', prefix = 'LOGGER')
define stream HighTempStream(roomNo int, temp double);

-- Filter the events with temperature greater than 40.0
@info(name = 'filterHighTempRooms')
from TempStream[(temp >= 40)]
select roomNo, temp
insert into HighTempStream;
