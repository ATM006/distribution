/*
 * Copyright (c)  2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package io.siddhi.distribution.event.simulator.core.internal.util.util;

import io.siddhi.distribution.common.common.exception.ResourceNotFoundException;
import io.siddhi.distribution.event.simulator.core.exception.exception.InvalidConfigException;
import io.siddhi.distribution.event.simulator.core.internal.generator.generator.random.RandomAttributeGenerator;
import io.siddhi.distribution.event.simulator.core.internal.generator.generator.random.util.CustomBasedAttrGenerator;
import io.siddhi.distribution.event.simulator.core.internal.generator.generator.random.util.PrimitiveBasedAttrGenerator;
import io.siddhi.distribution.event.simulator.core.internal.generator.generator.random.util.PropertyBasedAttrGenerator;
import io.siddhi.distribution.event.simulator.core.internal.generator.generator.random.util.RegexBasedAttrGenerator;
import org.json.JSONObject;
import org.wso2.siddhi.query.api.definition.Attribute;

/**
 * Factory class used to create random attribute generators.
 */
public class RandomAttrGeneratorFactoryImpl implements RandomAttrGeneratorFactory {

    /**
     * createRandomAttrGenerator() creates randomAttributeGenerators.
     *
     * @param attributeConfig attribute configuration of random attribute generator
     * @param attrType        attribute type to be generated by attribute generator
     */
    @Override
    public RandomAttributeGenerator createRandomAttrGenerator(JSONObject attributeConfig, Attribute.Type attrType)
            throws InvalidConfigException {
        if (CommonOperations.checkAvailability(attributeConfig, EventSimulatorConstants.RANDOM_DATA_GENERATOR_TYPE)) {
            RandomAttributeGenerator.RandomDataGeneratorType type;
            try {
                type = RandomAttributeGenerator.RandomDataGeneratorType.valueOf(attributeConfig
                        .getString(EventSimulatorConstants.RANDOM_DATA_GENERATOR_TYPE));
            } catch (IllegalArgumentException e) {
                throw new InvalidConfigException(
                        ResourceNotFoundException.ResourceType.RANDOM_SIMULATION,
                        attributeConfig.getString(EventSimulatorConstants.RANDOM_DATA_GENERATOR_TYPE),
                        "Invalid random attribute generation type. Generator type must be either '" +
                                RandomAttributeGenerator.RandomDataGeneratorType.CUSTOM_DATA_BASED + "' or '"
                                + RandomAttributeGenerator.RandomDataGeneratorType.PRIMITIVE_BASED + "' or '" +
                                RandomAttributeGenerator.RandomDataGeneratorType.PROPERTY_BASED + "' or '" +
                                RandomAttributeGenerator.RandomDataGeneratorType.REGEX_BASED + "'. Invalid attribute " +
                                "configuration : " + attributeConfig.toString());
            }
            RandomAttributeGenerator randomAttributeGenerator = null;
            switch (type) {
                case CUSTOM_DATA_BASED:
                    randomAttributeGenerator = new CustomBasedAttrGenerator();
                    randomAttributeGenerator.createRandomAttributeDTO(attrType, attributeConfig);
                    break;
                case PRIMITIVE_BASED:
                    randomAttributeGenerator = new PrimitiveBasedAttrGenerator();
                    randomAttributeGenerator.createRandomAttributeDTO(attrType, attributeConfig);
                    break;
                case PROPERTY_BASED:
                    randomAttributeGenerator = new PropertyBasedAttrGenerator();
                    randomAttributeGenerator.createRandomAttributeDTO(attrType, attributeConfig);
                    break;
                case REGEX_BASED:
                    randomAttributeGenerator = new RegexBasedAttrGenerator();
                    randomAttributeGenerator.createRandomAttributeDTO(attrType, attributeConfig);
                    break;
            }
            return randomAttributeGenerator;
        } else {
            throw new InvalidConfigException(
                    ResourceNotFoundException.ResourceType.RANDOM_SIMULATION,
                    attributeConfig.getString(EventSimulatorConstants.RANDOM_DATA_GENERATOR_TYPE),
                    "Random attribute generator type is required for random " +
                            "simulation. Generation type must be either '" +
                            RandomAttributeGenerator.RandomDataGeneratorType.CUSTOM_DATA_BASED + "' or '" +
                            RandomAttributeGenerator.RandomDataGeneratorType.PRIMITIVE_BASED + "' or '" +
                            RandomAttributeGenerator.RandomDataGeneratorType.PROPERTY_BASED + "' or '" +
                            RandomAttributeGenerator.RandomDataGeneratorType.REGEX_BASED + "'. Invalid attribute" +
                            " configuration : " + attributeConfig.toString());
        }
    }

    /**
     * validateRandomAttrGenerator() calls the validation method of the respective randomAttributeGenerators.
     *
     * @param attributeConfig attribute configuration of random attribute generator
     * @param attrType        attribute type to be generated by attribute generator
     */
    @Override
    public void validateRandomAttrGenerator(JSONObject attributeConfig, Attribute.Type attrType)
            throws InvalidConfigException {
        if (CommonOperations.checkAvailability(attributeConfig, EventSimulatorConstants.RANDOM_DATA_GENERATOR_TYPE)) {
            RandomAttributeGenerator.RandomDataGeneratorType type;
            try {
                type = RandomAttributeGenerator.RandomDataGeneratorType.valueOf(attributeConfig
                        .getString(EventSimulatorConstants.RANDOM_DATA_GENERATOR_TYPE));
            } catch (IllegalArgumentException e) {
                throw new InvalidConfigException(
                        ResourceNotFoundException.ResourceType.RANDOM_SIMULATION,
                        attributeConfig.getString(EventSimulatorConstants.RANDOM_DATA_GENERATOR_TYPE),
                        "Invalid random attribute generation type. Generator type must be either '" +
                                RandomAttributeGenerator.RandomDataGeneratorType.CUSTOM_DATA_BASED + "' or '"
                                + RandomAttributeGenerator.RandomDataGeneratorType.PRIMITIVE_BASED + "' or '" +
                                RandomAttributeGenerator.RandomDataGeneratorType.PROPERTY_BASED + "' or '" +
                                RandomAttributeGenerator.RandomDataGeneratorType.REGEX_BASED + "'. Invalid attribute " +
                                "configuration : " + attributeConfig.toString());
            }
            switch (type) {
                case CUSTOM_DATA_BASED:
                    new CustomBasedAttrGenerator().validateAttributeConfiguration(attrType, attributeConfig);
                    break;
                case PRIMITIVE_BASED:
                    new PrimitiveBasedAttrGenerator().validateAttributeConfiguration(attrType, attributeConfig);
                    break;
                case PROPERTY_BASED:
                    new PropertyBasedAttrGenerator().validateAttributeConfiguration(attrType, attributeConfig);
                    break;
                case REGEX_BASED:
                    new RegexBasedAttrGenerator().validateAttributeConfiguration(attrType, attributeConfig);
                    break;
            }
        } else {
            throw new InvalidConfigException(
                    ResourceNotFoundException.ResourceType.RANDOM_SIMULATION,
                    attributeConfig.getString(EventSimulatorConstants.RANDOM_DATA_GENERATOR_TYPE),
                    "Random attribute generator type is required for random " +
                            "simulation. Generation type must be either '" +
                            RandomAttributeGenerator.RandomDataGeneratorType.CUSTOM_DATA_BASED + "' or '" +
                            RandomAttributeGenerator.RandomDataGeneratorType.PRIMITIVE_BASED + "' or '" +
                            RandomAttributeGenerator.RandomDataGeneratorType.PROPERTY_BASED + "' or '" +
                            RandomAttributeGenerator.RandomDataGeneratorType.REGEX_BASED + "'. Invalid attribute" +
                            " configuration : " + attributeConfig.toString());
        }
    }
}
