# Copyright 2017 WSO2 Inc. (http://wso2.org)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Data Sources Configurations for different databases.
wso2.datasources:
  # datasources
  dataSources:
    # Datasource configuration for H2 Database
    - name: WSO2_STATUS_DASHBOARD_DB
      description: The default datasource used for WSO2 Carbon Metrics
       # JNDI mapping of a data source
      jndiConfig:
        name: jdbc/wso2_status_dashboard
        # data source definition
      definition:
        # data source type
        type: RDBMS
        # data source configuration
        configuration:
          jdbcUrl: 'jdbc:h2:./database/wso2_status_dashboard'
          username: wso2carbon
          password: wso2carbon
          driverClassName: org.h2.Driver
          maxPoolSize: 50
          idleTimeout: 60000
          connectionTestQuery: SELECT 1
          validationTimeout: 30000
          isAutoCommit: false

    # Datasource configuration for MySQL Database
    - name: WSO2_STATUS_DASHBOARD_DB
      description: The MySQL datasource used for WSO2 Carbon Metrics
      # JNDI mapping of a data source
      jndiConfig:
        name: jdbc/wso2_status_dashboard
      # data source definition
      definition:
        # data source type
        type: RDBMS
        # data source configuration
        configuration:
          jdbcUrl: 'jdbc:mysql://localhost/wso2_status_dashboard'
          username: root
          password: root
          driverClassName: com.mysql.jdbc.Driver
          maxPoolSize: 50
          idleTimeout: 60000
          connectionTestQuery: SELECT 1
          validationTimeout: 30000
          isAutoCommit: false

wso2.status.dashboard:
  pollingInterval: 5
  metricsDatasourceName: 'WSO2_METRICS_DB'
  dashboardDatasourceName: 'WSO2_STATUS_DASHBOARD_DB'
  adminUsername: admin
  adminPassword: admin
  queries:
    MySQL:
      #mysql configuration
      tableCreateQuery: CREATE TABLE IF NOT EXISTS {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})
      tableCheckQuery: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1
      tableGetOneRow: SELECT * FROM {{TABLE_NAME}} LIMIT 1
      tableCheckQuery: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1
      recordExistsQuery: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}
      recordSelectQuery: SELECT {{COLUMNS}} FROM {{TABLE_NAME}} {{CONDITION}}
      recordSelectAppMetricsQuery: select {{COLUMNS}} AS {{RESULT}},result.TIMESTAMP from (select * from {{TABLE_NAME}} where SOURCE='{{WORKER_ID}}' AND name like 'org.wso2.siddhi.SiddhiApps.{{NAME}}.%' AND TIMESTAMP BETWEEN {{CURRENT_TIME_MILLISECONDS}}-{{TIME_INTERVAL}} AND {{CURRENT_TIME_MILLISECONDS}})result GROUP BY result.TIMESTAMP
      recordSelectWorkerThroughputQuery: select {{COLUMNS}} AS {{RESULT}},result.TIMESTAMP from (select * from {{TABLE_NAME}} where SOURCE='{{WORKER_ID}}' AND TIMESTAMP BETWEEN {{CURRENT_TIME_MILLISECONDS}} -{{TIME_INTERVAL}} AND {{CURRENT_TIME_MILLISECONDS}})result GROUP BY result.TIMESTAMP
      recordSelectWorkerMetricsQuery: select VALUE,TIMESTAMP from {{TABLE_NAME}} where SOURCE='{{WORKER_ID}}' AND TIMESTAMP BETWEEN {{CURRENT_TIME_MILLISECONDS}} -{{TIME_INTERVAL}} AND {{CURRENT_TIME_MILLISECONDS}} AND NAME='{{NAME}}';
      recordInsertQuery: INSERT INTO {{TABLE_NAME}} {{COLUMNS}} VALUES ({{Q}})
      recordUpdateQuery: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}
      recordDeleteQuery: DELETE FROM {{TABLE_NAME}} {{CONDITION}}
      selectAppComponentList: select DISTINCT NAME from {{TABLE_NAME}} where SOURCE='{{WORKER_ID}}' AND name like 'org.wso2.siddhi.SiddhiApps.{{NAME}}.%' AND TIMESTAMP BETWEEN {{CURRENT_TIME_MILLISECONDS}} - {{TIME_INTERVAL}} AND {{CURRENT_TIME_MILLISECONDS}};
      selectAppComponentMetrics: SELECT {{COLUMNS}} FROM {{TABLE_NAME}} WHERE SOURCE='{{WORKER_ID}}' AND name='{{NAME}}' ORDER BY TIMESTAMP DESC  LIMIT 1;

  typeMapping:
    binaryType: BLOB
    booleanType: TINYINT(1)
    doubleType: DECIMAL
    floatType: FLOAT
    integerType: INT
    longType: BIGINT
    stringType: VARCHAR

